// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SEGES.Backend;

#nullable disable

namespace SEGES.Backend.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240507063545_DBCreation")]
    partial class DBCreation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SEGES.Shared.Entities.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.HasKey("CityId");

                    b.HasIndex("StateId", "Name")
                        .IsUnique();

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("SEGES.Shared.Entities.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CountryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("SEGES.Shared.Entities.DocTraceability", b =>
                {
                    b.Property<int>("DocTraceabilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocTraceabilityId"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Observations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequirementID")
                        .HasColumnType("int");

                    b.Property<int>("Requirement_ID")
                        .HasColumnType("int");

                    b.Property<int>("SourceSorceId")
                        .HasColumnType("int");

                    b.Property<int?>("Source_Id")
                        .HasColumnType("int");

                    b.Property<int?>("TypeDocTraceabilityTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("Type_Id")
                        .HasColumnType("int");

                    b.HasKey("DocTraceabilityId");

                    b.HasIndex("RequirementID");

                    b.HasIndex("SourceSorceId");

                    b.HasIndex("TypeDocTraceabilityTypeId");

                    b.ToTable("DocTraceabilities");
                });

            modelBuilder.Entity("SEGES.Shared.Entities.DocTraceabilityType", b =>
                {
                    b.Property<int>("DocTraceabilityTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocTraceabilityTypeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DocTraceabilityTypeId");

                    b.ToTable("DocTraceabilityTypes");
                });

            modelBuilder.Entity("SEGES.Shared.Entities.Goal", b =>
                {
                    b.Property<int>("GoalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GoalId"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("GoalDescription")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("GoalName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("GoalId");

                    b.ToTable("Goal");
                });

            modelBuilder.Entity("SEGES.Shared.Entities.HUApprovalStatus", b =>
                {
                    b.Property<int>("HUApprovalStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HUApprovalStatusId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("HUApprovalStatusId");

                    b.ToTable("HUApprovalStatuses");
                });

            modelBuilder.Entity("SEGES.Shared.Entities.HUPriority", b =>
                {
                    b.Property<int>("PriorityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PriorityId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PriorityId");

                    b.ToTable("HUPriorities");
                });

            modelBuilder.Entity("SEGES.Shared.Entities.HUPublicationStatus", b =>
                {
                    b.Property<int>("HUPublicationStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HUPublicationStatusId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("HUPublicationStatusId");

                    b.ToTable("HUPublicationStatuses");
                });

            modelBuilder.Entity("SEGES.Shared.Entities.HUStatus", b =>
                {
                    b.Property<int>("HUStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HUStatusId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("HUStatusId");

                    b.ToTable("HUStatuses");
                });

            modelBuilder.Entity("SEGES.Shared.Entities.Issue", b =>
                {
                    b.Property<int>("IssueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IssueId"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IssueDescription")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("IssueEndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IssueName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("IssueStartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("Project_ID")
                        .HasColumnType("int");

                    b.HasKey("IssueId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Issues");
                });

            modelBuilder.Entity("SEGES.Shared.Entities.KPI", b =>
                {
                    b.Property<int>("KPI_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KPI_ID"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("GoalId")
                        .HasColumnType("int");

                    b.Property<int>("Goal_Id")
                        .HasColumnType("int");

                    b.Property<string>("KPI_Description")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("KPI_Formula")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KPI_Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("KPI_ID");

                    b.HasIndex("GoalId");

                    b.ToTable("KPIs");
                });

            modelBuilder.Entity("SEGES.Shared.Entities.Module", b =>
                {
                    b.Property<int>("ModuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ModuleId"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModuleDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ModuleId");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("SEGES.Shared.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<int>("Module_ID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("SEGES.Shared.Entities.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectId"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProjectDescription")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime>("ProjectEndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProjectManagerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProjectManager_ID")
                        .HasColumnType("int");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("ProjectStartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProjectStatusId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectStatus_ID")
                        .HasColumnType("int");

                    b.Property<string>("RequirementsEngineerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("RequirementsEngineer_ID")
                        .HasColumnType("int");

                    b.Property<string>("StakeHolderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("StakeHolder_ID")
                        .HasColumnType("int");

                    b.HasKey("ProjectId");

                    b.HasIndex("ProjectManagerId");

                    b.HasIndex("ProjectStatusId");

                    b.HasIndex("RequirementsEngineerId");

                    b.HasIndex("StakeHolderId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("SEGES.Shared.Entities.ProjectStatus", b =>
                {
                    b.Property<int>("ProjectStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectStatusId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ProjectStatusId");

                    b.ToTable("ProjectStatuses");
                });

            modelBuilder.Entity("SEGES.Shared.Entities.Rel_IssueGoal", b =>
                {
                    b.Property<int>("Issue_ID")
                        .HasColumnType("int");

                    b.Property<int>("Goal_ID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("GoalId")
                        .HasColumnType("int");

                    b.Property<int>("IssueId")
                        .HasColumnType("int");

                    b.Property<int>("Rel_IssueGoalId")
                        .HasColumnType("int");

                    b.HasKey("Issue_ID", "Goal_ID");

                    b.HasIndex("GoalId");

                    b.HasIndex("IssueId");

                    b.ToTable("Rel_IssueGoals");
                });

            modelBuilder.Entity("SEGES.Shared.Entities.Rel_RolPermission", b =>
                {
                    b.Property<int>("Role_ID")
                        .HasColumnType("int");

                    b.Property<int>("Permission_ID")
                        .HasColumnType("int");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("RolePermissionId")
                        .HasColumnType("int");

                    b.HasKey("Role_ID", "Permission_ID");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("Rel_RolPermissions");
                });

            modelBuilder.Entity("SEGES.Shared.Entities.Requirement", b =>
                {
                    b.Property<int>("RequirementID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequirementID"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("GoalId")
                        .HasColumnType("int");

                    b.Property<int>("Goal_ID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RequirementDescription")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.HasKey("RequirementID");

                    b.HasIndex("GoalId");

                    b.ToTable("Requirements");
                });

            modelBuilder.Entity("SEGES.Shared.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleDescription")
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("SEGES.Shared.Entities.SecundaryKPI", b =>
                {
                    b.Property<int>("SecundaryKPI_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SecundaryKPI_Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("KPI_ID")
                        .HasColumnType("int");

                    b.Property<string>("SecundaryKPI_Description")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("SecundaryKPI_Formula")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecundaryKPI_Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SecundaryKPI_Id");

                    b.HasIndex("KPI_ID");

                    b.ToTable("SecundaryKPI");
                });

            modelBuilder.Entity("SEGES.Shared.Entities.SourceDocTraceability", b =>
                {
                    b.Property<int>("SorceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SorceId"));

                    b.Property<int>("SourceName")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.HasKey("SorceId");

                    b.ToTable("SourceDocTraceability");
                });

            modelBuilder.Entity("SEGES.Shared.Entities.State", b =>
                {
                    b.Property<int>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StateId"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("StateId");

                    b.HasIndex("CountryId", "Name")
                        .IsUnique();

                    b.ToTable("States");
                });

            modelBuilder.Entity("SEGES.Shared.Entities.UseCase", b =>
                {
                    b.Property<int>("UseCaseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UseCaseID"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("RequirementID")
                        .HasColumnType("int");

                    b.Property<int>("Requirement_Id")
                        .HasColumnType("int");

                    b.Property<string>("UseCaseBussinessRule")
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)");

                    b.Property<DateTime>("UseCaseCreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UseCaseDescription")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("UseCaseExceptions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UseCaseFrequency")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("UseCasePostcondition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UseCasePreondition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UseCaseUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UseCaseWarnings")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UseCaseID");

                    b.HasIndex("RequirementID");

                    b.ToTable("UseCases");
                });

            modelBuilder.Entity("SEGES.Shared.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("City_Id")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("SEGES.Shared.Entities.UserStory", b =>
                {
                    b.Property<int>("UserStoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserStoryId"));

                    b.Property<string>("AcceptanceCriteria")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("HUApprovalStatusId")
                        .HasColumnType("int");

                    b.Property<int>("HUApprovalStatus_Id")
                        .HasColumnType("int");

                    b.Property<int>("HUPriorityPriorityId")
                        .HasColumnType("int");

                    b.Property<int>("HUPriority_Id")
                        .HasColumnType("int");

                    b.Property<int>("HUPublicationStatusId")
                        .HasColumnType("int");

                    b.Property<int>("HUPublicationStatus_Id")
                        .HasColumnType("int");

                    b.Property<int>("HUStatusId")
                        .HasColumnType("int");

                    b.Property<int>("HUStatus_Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("RequirementID")
                        .HasColumnType("int");

                    b.Property<int>("Requirement_Id")
                        .HasColumnType("int");

                    b.Property<string>("UserStoryDescription")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.HasKey("UserStoryId");

                    b.HasIndex("HUApprovalStatusId");

                    b.HasIndex("HUPriorityPriorityId");

                    b.HasIndex("HUPublicationStatusId");

                    b.HasIndex("HUStatusId");

                    b.HasIndex("RequirementID");

                    b.ToTable("UserStories");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SEGES.Shared.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SEGES.Shared.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SEGES.Shared.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SEGES.Shared.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SEGES.Shared.Entities.City", b =>
                {
                    b.HasOne("SEGES.Shared.Entities.State", "State")
                        .WithMany("Cities")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("SEGES.Shared.Entities.DocTraceability", b =>
                {
                    b.HasOne("SEGES.Shared.Entities.Requirement", "Requirement")
                        .WithMany("DocTraceability")
                        .HasForeignKey("RequirementID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SEGES.Shared.Entities.SourceDocTraceability", "Source")
                        .WithMany()
                        .HasForeignKey("SourceSorceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SEGES.Shared.Entities.DocTraceabilityType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeDocTraceabilityTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Requirement");

                    b.Navigation("Source");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("SEGES.Shared.Entities.Issue", b =>
                {
                    b.HasOne("SEGES.Shared.Entities.Project", "Project")
                        .WithMany("Issues")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("SEGES.Shared.Entities.KPI", b =>
                {
                    b.HasOne("SEGES.Shared.Entities.Goal", "Goal")
                        .WithMany("KPIs")
                        .HasForeignKey("GoalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Goal");
                });

            modelBuilder.Entity("SEGES.Shared.Entities.Permission", b =>
                {
                    b.HasOne("SEGES.Shared.Entities.Module", "Module")
                        .WithMany("Permissions")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("SEGES.Shared.Entities.Project", b =>
                {
                    b.HasOne("SEGES.Shared.Entities.User", "ProjectManager")
                        .WithMany()
                        .HasForeignKey("ProjectManagerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SEGES.Shared.Entities.ProjectStatus", "ProjectStatus")
                        .WithMany()
                        .HasForeignKey("ProjectStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SEGES.Shared.Entities.User", "RequirementsEngineer")
                        .WithMany()
                        .HasForeignKey("RequirementsEngineerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SEGES.Shared.Entities.User", "StakeHolder")
                        .WithMany()
                        .HasForeignKey("StakeHolderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ProjectManager");

                    b.Navigation("ProjectStatus");

                    b.Navigation("RequirementsEngineer");

                    b.Navigation("StakeHolder");
                });

            modelBuilder.Entity("SEGES.Shared.Entities.Rel_IssueGoal", b =>
                {
                    b.HasOne("SEGES.Shared.Entities.Goal", "Goal")
                        .WithMany("IssueGoals")
                        .HasForeignKey("GoalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SEGES.Shared.Entities.Issue", "Issue")
                        .WithMany("IssueGoals")
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Goal");

                    b.Navigation("Issue");
                });

            modelBuilder.Entity("SEGES.Shared.Entities.Rel_RolPermission", b =>
                {
                    b.HasOne("SEGES.Shared.Entities.Permission", "Permission")
                        .WithMany("RolPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SEGES.Shared.Entities.Role", "Role")
                        .WithMany("RelPermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SEGES.Shared.Entities.Requirement", b =>
                {
                    b.HasOne("SEGES.Shared.Entities.Goal", "Goal")
                        .WithMany("Requirements")
                        .HasForeignKey("GoalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Goal");
                });

            modelBuilder.Entity("SEGES.Shared.Entities.SecundaryKPI", b =>
                {
                    b.HasOne("SEGES.Shared.Entities.KPI", "KPI")
                        .WithMany("SecundaryKPIs")
                        .HasForeignKey("KPI_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("KPI");
                });

            modelBuilder.Entity("SEGES.Shared.Entities.State", b =>
                {
                    b.HasOne("SEGES.Shared.Entities.Country", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("SEGES.Shared.Entities.UseCase", b =>
                {
                    b.HasOne("SEGES.Shared.Entities.Requirement", "Requirement")
                        .WithMany("UseCases")
                        .HasForeignKey("RequirementID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Requirement");
                });

            modelBuilder.Entity("SEGES.Shared.Entities.User", b =>
                {
                    b.HasOne("SEGES.Shared.Entities.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SEGES.Shared.Entities.Role", null)
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("City");
                });

            modelBuilder.Entity("SEGES.Shared.Entities.UserStory", b =>
                {
                    b.HasOne("SEGES.Shared.Entities.HUApprovalStatus", "HUApprovalStatus")
                        .WithMany()
                        .HasForeignKey("HUApprovalStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SEGES.Shared.Entities.HUPriority", "HUPriority")
                        .WithMany()
                        .HasForeignKey("HUPriorityPriorityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SEGES.Shared.Entities.HUPublicationStatus", "HUPublicationStatus")
                        .WithMany()
                        .HasForeignKey("HUPublicationStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SEGES.Shared.Entities.HUStatus", "HUStatus")
                        .WithMany()
                        .HasForeignKey("HUStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SEGES.Shared.Entities.Requirement", "Requirement")
                        .WithMany("UserStories")
                        .HasForeignKey("RequirementID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("HUApprovalStatus");

                    b.Navigation("HUPriority");

                    b.Navigation("HUPublicationStatus");

                    b.Navigation("HUStatus");

                    b.Navigation("Requirement");
                });

            modelBuilder.Entity("SEGES.Shared.Entities.City", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("SEGES.Shared.Entities.Country", b =>
                {
                    b.Navigation("States");
                });

            modelBuilder.Entity("SEGES.Shared.Entities.Goal", b =>
                {
                    b.Navigation("IssueGoals");

                    b.Navigation("KPIs");

                    b.Navigation("Requirements");
                });

            modelBuilder.Entity("SEGES.Shared.Entities.Issue", b =>
                {
                    b.Navigation("IssueGoals");
                });

            modelBuilder.Entity("SEGES.Shared.Entities.KPI", b =>
                {
                    b.Navigation("SecundaryKPIs");
                });

            modelBuilder.Entity("SEGES.Shared.Entities.Module", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("SEGES.Shared.Entities.Permission", b =>
                {
                    b.Navigation("RolPermissions");
                });

            modelBuilder.Entity("SEGES.Shared.Entities.Project", b =>
                {
                    b.Navigation("Issues");
                });

            modelBuilder.Entity("SEGES.Shared.Entities.Requirement", b =>
                {
                    b.Navigation("DocTraceability");

                    b.Navigation("UseCases");

                    b.Navigation("UserStories");
                });

            modelBuilder.Entity("SEGES.Shared.Entities.Role", b =>
                {
                    b.Navigation("RelPermissions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("SEGES.Shared.Entities.State", b =>
                {
                    b.Navigation("Cities");
                });
#pragma warning restore 612, 618
        }
    }
}
